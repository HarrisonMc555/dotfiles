#!/usr/bin/env bash

function _isinteger() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: _isnumber <string>"
    fi
    input="$1"
    [[ "$input" =~ ^[0-9]+$ ]]
}

function _isnumber() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: _isnumber <string>"
    fi
    input="$1"
    [[ "$input" =~ ^[0-9]+([.][0-9]+)?$ ]]
}

function _loop {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        cat <<HELP
loop

Usage: loop [-s seconds] [-c count] commands

Run one or more commands repeatedly.

Multiple commands must be specified as a single string argument.

You can access the current iteration with \$i. The slash is necessary to
prevent the shell from interpreting the variable before passing it into this
command. Alternatively, you can wrap it in single quotes (but not both).

In bash, aliasing like this allows you to specify aliases/functions:
  alias loop=". loop"

Examples: 

Display the contents of the current directory every second:
  loop ls

Display how much space is used and available every five seconds:
  loop -s 5 df / -h

Count from 0 to 9, waiting 1 second in between each number:
  loop -c 10 echo 'Number: $i'

Copyright (c) 2019 Harrison McCullough
Licensed under the MIT license.
HELP
        return;
    fi

    local seconds=1
    local count=

    while true; do
        case "$1" in
            "-s")
                shift
                seconds="$1"
                shift
                ;;
            "-c")
                shift
                count="$1"
                shift
                ;;
            *)
                break
                ;;
        esac
    done

    if [[ $# -lt 1 ]]; then
        echo "Usage: loop [-s SECONDS | -c COUNT] CMD [CMD]*"
        return 1
    fi

    _isnumber "$seconds" || {
        echo "Argument to -s must be a number"
        echo "	(argument to -s: \"$seconds\")"
        return 1
    }

    if [[ "$count" ]]; then
        _isnumber "$count" || {
            echo "Argument to -c must be a number"
            echo "	(argument to -c: \"$count\")"
            return 1
        }
    fi

    # For underlining headers.
    local header endheader
    header="$(tput smul)"
    endheader="$(tput rmul)"

    local i=0
    while true; do
        echo -e "${header}$(date +"%H:%M:%S")${endheader}"
        eval "$@" 2>&1
        echo
        sleep "$seconds"
        if [[ "$count" ]]; then
            ((i++))
            if [[ "$i" -ge "$count" ]]; then
                break
            fi
        fi
    done
}

_loop "$@"
