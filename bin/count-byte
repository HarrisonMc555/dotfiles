#!/usr/bin/env python3

import sys
import argparse

def main():
   parser = gen_parser()
   args = parser.parse_args()
   if args.hex:
      byte = args.hex
   elif args.decimal:
      byte = args.decimal
   elif args.char:
      byte = args.char
   else:
      raise Exception(f'No byte found, invalid arguments: {args}')
   file = args.file
   chunk_size = args.chunk_size
   count, length = count_matching_bytes(byte, file, chunk_size)
   if args.number:
      print(f'{count} / {length}')
   else:
      fraction = (count / length) * 100
      print(f'{fraction:.1f}%')


def count_matching_bytes(byte, file, chunk_size) -> (int, int):
   length = 0
   count = 0
   while True:
      b = file.read(chunk_size)
      if len(b) == 0:
         return (count, length)
      length += len(b)
      count += b.count(byte)


def hex_num(string) -> int:
   return int(string, 16)


def char(string) -> int:
   # Support backslash-encoded escape characters (e.g. \n, \t, etc.)
   string = bytes(string, 'utf-8').decode('unicode_escape')
   if len(string) != 1:
      raise TypeError(f'expected a character, but string of length {len(string)} found')
   return ord(string)


def gen_parser() -> argparse.ArgumentParser:
   parser = argparse.ArgumentParser(description='Count the occurences of a byte in a file')
   byte_group = parser.add_argument_group('Byte to search for')
   byte_exclusive_group = byte_group.add_mutually_exclusive_group(required=True)
   byte_exclusive_group.add_argument('--hex', '-x', type=hex_num, help='Hexadecimal byte')
   byte_exclusive_group.add_argument('--decimal', '-d', type=int, help='Decimal byte')
   byte_exclusive_group.add_argument('--char', '-c', type=char, help='Character byte')
   parser.add_argument('--file', '-f', nargs='?', type=argparse.FileType('rb'), default=sys.stdin)
   parser.add_argument('--chunk-size', '-s', type=int, default=1024, help='The number of bytes to read at a time')
   parser.add_argument('--number', '-n', action='store_true', default=True,
                       help='Display count as the number of occurrences')
   parser.add_argument('--percentage', '-p', dest='number', action='store_false',
                       help='Display count as a fraction of the total bytes')
   return parser


if __name__ == '__main__':
    main()
