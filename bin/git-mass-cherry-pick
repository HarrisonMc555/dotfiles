#!/usr/bin/env bash

bitbucket_url="https://git.romariccorp.com:7990"
default_remote="origin"

function usage() {
    echo "Usage: git mass-cherry-pick <commit> <branch> [<branch>, ...] [-h|--help] [-n|--no-merge-commit] [-b <branch_name>|--branch <branch_name>|--direct] [-s <strategy>|--strategy <strategy>] [-r|--real] [--dry-run] [--push|--no-push] [-d|--debug]"
}

__red='\033[0;31m'
__clear='\033[0m'
function e_err() {
    >&2 echo -e "${__red}$*${__clear}"
}

function e_debug() {
    if [[ "$debug" ]]; then
        echo "$@"
    fi
}

function die() {
    if [[ $# -gt 0 ]]; then
        e_err "$@"
    fi
    exit 1
}

function die_with_usage() {
    if [[ $# -gt 0 ]]; then
        e_err "$@"
    fi
    echo -en "${__red}"
    >&2 usage
    echo -en "${__clear}"
    exit 1
}

__tput_smul="$(tput smul)"
__tput_rmul="$(tput rmul)"
function e_underline() {
    if [[ $# != 1 ]]; then
        echo "usage: e_underline <message>"
        return
    fi

    str="$1"
    echo -e "\n${__tput_smul}${str}${__tput_rmul}"
}

function run() {
    if ! [[ "$real" ]] || [[ "$debug" ]]; then
        echo "$@"
    fi
    if [[ "$real" ]]; then
        "$@"
    fi
}

function run_always() {
    if ! [[ "$real" ]] || [[ "$debug" ]]; then
        echo "$@"
    fi
    "$@"
}

function git_contains_uncommitted_changes() {
    git status --short | grep -q -E -v '^\?\?'
}

debug=
double_dash=
args=()
for arg in "$@"; do
    if [[ "$double_dash" ]]; then
        args+=("$arg")
        continue
    fi
    case "$arg" in
        --)
            args+=("$arg")
            double_dash=true
            ;;
        -d|--debug)
            debug=true
            ;;
        -x)
            set_x=true
            ;;
        *)
            args+=("$arg")
            ;;
    esac
done

min_git_version_empty_flag=2.45.0
if ! current_git_version=$(git --version | awk '{print $3}'); then
    die "Error running 'git --version', is Git installed?"
fi

# https://unix.stackexchange.com/a/285928
smaller_git_version=$(printf '%s\n' "$min_git_version_empty_flag" "$current_git_version" |
                          sort -V | head -n1)
if [[ "$smaller_git_version" = "$min_git_version_empty_flag" ]]; then
    git_supports_empty_flag=1
fi

if [[ "$set_x" = true ]]; then
    set -x
fi

real=
direct=
merge=true
positional_args=()
double_dash=
merge_branch_name=
strategy=
push=true
for ((i = 0; i < "${#args[@]}"; i++)); do
    arg="${args[$i]}"
    if [[ "$double_dash" ]]; then
        positional_args+=("$arg")
        continue
    fi
    case "$arg" in
        -h|--help)
            usage
            die
            ;;
        -n|--no-merge-commit|--no-merge)
            e_debug "NOT merge commit"
            merge=
            ;;
        -b|--branch)
            ((i++))
            merge_branch_name="${args[i]}"
            e_debug "Branch name: $merge_branch_name"
            ;;
        -s|--strategy)
            ((i++))
            strategy="${args[i]}"
            e_debug "Strategy: $strategy"
            ;;
        -r|--real)
            real=true
            ;;
        --dry-run)
            real=
            ;;
        --push)
            push=true
            ;;
        --no-push)
            push=
            ;;
        --direct)
            direct=true
            ;;
        --)
            double_dash=true
            e_debug "Double dash, treating all futher arguments as positional"
            break
            ;;
        -*)
            die "Unrecognized flag: '$arg'"
            ;;
        *)
            positional_args+=("$arg")
            ;;
    esac
done

e_debug "Positional args: ${positional_args[*]}"
[[ "${#positional_args[@]}" -ge 1 ]] || die_with_usage "Missing argument COMMIT"
commit="${positional_args[0]}"
unset 'positional_args[0]'
e_debug "commit: ${commit}"
if [[ "$merge" ]]; then
    run_always git rev-parse --verify "${commit}" &>/dev/null ||
        die_with_usage "Invalid commit: \"${commit}\""
else
    run_always git --no-pager log "${commit}" &>/dev/null ||
        die_with_usage "Invalid commit/commit range: \"${commit}\""
fi

e_debug "Positional args: ${positional_args[*]}"
[[ "${#positional_args[@]}" -ge 1 ]] || die_with_usage "Missing argument BRANCH"
branches=("${positional_args[@]}")

for branch in "${branches[@]}"; do
    git show-ref --quiet "$branch" || die_with_usage "Invalid BRANCH: \"${branch}\""
done

original_branch=$(git rev-parse --abbrev-ref HEAD) ||
    die "Could not retrieve current branch"
if [[ "$original_branch" = "HEAD" ]]; then
    original_branch=$(git rev-parse HEAD) ||
        die "Could not retrieve current commit"
fi

if [[ "$direct" ]]; then
    if [[ "$merge_branch_name" ]]; then
        die "--branch and --direct flags are incompatible"
    fi
elif [[ ! "$merge_branch_name" ]]; then
    # shellcheck disable=SC2016
    merge_commit_message=$(git show --quiet --pretty='%B' "${commit}") ||
        die "Could not retrieve commit message for commit: \"${commit}\""
    merge_branch_name=$(echo "$merge_commit_message" |
                            grep -E '^Merge in ' |
                            sed -E 's/^Merge in .* from (.*) to .*$/\1/') ||
        die "Could not find branch name in commit message for commit ${commit}"

    if [[ "$merge_branch_name" = "" ]]; then
        e_err "Could not find merge branch name from git commit message:"
        >&2 echo "${merge_commit_message}"
        die
    fi
fi

if ! [[ "$direct" ]]; then
    # shellcheck disable=SC1083
    if ! branch_remote_ref=$(git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}"); then
        e_err "Could not get remote ref for current branch"
        e_err "Using default value: \"${default_remote}\""
        branch_remote_ref="${default_remote}"
    fi

    remote="${branch_remote_ref%%/*}"
    [[ "${remote}" != "${branch}" ]] ||
        die "Could not extract remote from remote ref \"${branch_remote_ref}\""

    remote_url=$(git remote get-url "${remote}") ||
        die "Could not get URL for remote \"${remote}\""

    [[ "${remote_url}" =~ ^[^:]*://([^@]+@)?([^/]+)(/.*)?/([^/]*)/([^/.]*).git$ ]] ||
        die "Pattern does not match URL: \"${remote_url}\""

    project="${BASH_REMATCH[4]}"
    [[ "${project}" != "" ]] ||
        die "No project found in URL: \"${remote_url}\""

    repository="${BASH_REMATCH[5]}"
    [[ "${repository}" != "" ]] ||
        die "No repository found in URL: \"${remote_url}\""
fi

if git_contains_uncommitted_changes; then
    e_underline "Stashing uncommitted changes"
    if ! run_always git stash; then
        die "Could not stash changes"
    fi
    stashed_changes=true
fi

if ! run git fetch; then
    die "Could not fetch from remote"
fi

while [[ "${#branches[@]}" -gt 0 ]]; do
    for branch_index in "${!branches[@]}"; do
        break
    done
    if [[ "${branch_index}" = "" ]]; then
        die "Internal error: Could not get branch index"
    fi

    branch="${branches[$branch_index]}"
    if [[ "${branch}" = "" ]]; then
        die "Internal error: No branch found at index ${branch_index}"
    fi
    unset 'branches["$branch_index"]'

    e_underline "${branch}"
    if ! [[ "$direct" ]]; then
        if [[ "${branch}" = "${merge_branch_name}" ]]; then
            echo "Skipping because it is the target branch of the merge commit"
            continue
        fi

        if ! target_branch_suffix=$(echo "${branch}" | tr '/' '_'); then
            e_err "Could not clean up branch name \"${branch}\""
            continue
        fi

        new_branch_name="${merge_branch_name}_${target_branch_suffix}"
        create_pull_request_url="${bitbucket_url}/projects/${project}/repos/${repository}/pull-requests?create&sourceBranch=refs/heads/${new_branch_name}"
    fi

    if ! run git switch "${branch}"; then
        e_err "Could not switch to branch: \"${branch}\""
        e_err "This requires manual resolution"
        exit 1
    fi

    if ! run git merge --ff-only; then
        e_err "Could not update local branch: \"${branch}\", skipping"
        continue
    fi

    if ! [[ "$direct" ]] && ! { run git switch -c "${new_branch_name}" || run git switch "${new_branch_name}"; }; then
        e_err "Could not create new branch: \"${new_branch_name}\""
        continue
    fi

    if ! original_branch_head=$(git log --max-count 1 --pretty='%H' HEAD) ||
       [[ "$original_branch_head" = "" ]]; then
        e_err "Could not retrieve the current branch HEAD, skipping"
        continue
    fi

    if [[ "$strategy" ]]; then
        # Intentionally allow it to expand so we can add additional arguments
        strategy_arg="--strategy="$strategy
    fi
    e_debug "Strategy arg: ${strategy_arg}"
    if [[ "${merge}" = true ]]; then
        cherry_pick_arg="${commit}^..${commit}^2"
    else
        cherry_pick_arg="${commit}"
    fi
    e_debug "Cherry pick arg: ${cherry_pick_arg}"
    # shellcheck disable=SC2206
    cherry_pick_command=(git cherry-pick ${strategy_arg} "${cherry_pick_arg}")
    if [[ "$git_supports_empty_flag" ]]; then
        cherry_pick_command+=("--empty=drop")
    fi
    # shellcheck disable=SC2086
    # if ! run git cherry-pick ${strategy_arg} "${cherry_pick_arg}" --empty=drop; then
    if ! run "${cherry_pick_command[@]}"; then
        e_err "Could not cherry-pick commits"
        e_err "This requires manual resolution"
        if [[ "${#branches[@]}" -gt 0 ]]; then
            command="git mass-cherry-pick \"$commit\""
            if [[ "$direct" ]]; then
                command+=" --direct"
            else
                command+=" --branch \"{$merge_branch_name}\""
            fi
            if [[ "$strategy" ]]; then
                command+=" --strategy ${strategy}"
            fi
            if ! [[ "$merge" ]]; then
                command+=" --no-merge-commit"
            fi
            for branch in "${branches[@]}"; do
                command+=$(printf ' %q' "$branch")
            done
            e_err "Resume by executing \`${command}'"
        fi
        die
    fi

    if ! new_branch_head=$(git log --max-count 1 --pretty='%H' HEAD) ||
       [[ "$new_branch_head" = "" ]]; then
        e_err "Could not retrieve the new branch HEAD"
        e_err "Continuing anyways"
    fi

    if [[ "$real" = true ]] && [[ "${new_branch_head}" != "" ]] && \
           [[ "${new_branch_head}" = "${original_branch_head}" ]]; then
        echo "Nothing changed after the cherry-pick, assuming the change was already applied to this branch"
        echo "Skipping"
        continue
    fi

    push_command=(git -c push.default=current push)
    if [[ "$push" ]]; then
        if ! run "${push_command[@]}"; then
            e_err "Could not push branch: \"${new_branch_name}\""
            continue
        fi
    else
        echo "NOT pushing changes"
    fi

    if ! [[ "$direct" ]]; then
        run open "${create_pull_request_url}"
        echo "Create pull request: ${create_pull_request_url}"
    fi
done

e_underline "Switching to original branch"
run git switch "${original_branch}"

if [[ "$stashed_changes" ]]; then
    e_underline "Restoring changes from stash"
    run_always git stash pop
fi
