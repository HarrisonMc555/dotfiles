#!/usr/bin/env bash

# Updates all listed branches, deleting any branches that have been fully merged
# and deleted on  the server.

if [[ $# -eq 0 ]]; then
    >&2 echo "Usage: git update-branches BRANCH [BRANCH, ..]"
    exit 1
fi

function delete_gone_branches() {
    # shellcheck disable=SC2016
    local awk_cmd='$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}' &&
        git fetch -p &&
        for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads |
                            awk "$awk_cmd"); do
            git branch -d "$branch"
        done
}

__tput_smul="$(tput smul)"
__tput_rmul="$(tput rmul)"
function e_underline() {
    if [[ $# != 1 ]]; then
        echo "usage: e_underline <message>"
        return
    fi

    str="$1"
    echo -e "\n${__tput_smul}${str}${__tput_rmul}"
}

function e_error() {
    if [[ $# -gt 0 ]]; then
        echo -e "\033[0;31m$*\033[0m"
    fi
}

original_branch="$(git rev-parse --abbrev-ref HEAD)"
if [[ "$original_branch" = "HEAD" ]]; then
    original_branch="$(git rev-parse HEAD)"
fi

e_underline "Updating from remote"
if ! git fetch; then
    >&2 echo "Cannot update from remote"
    exit 1
fi

while [[ $# -gt 0 ]]; do
    branch="$1"
    e_underline "$branch"
    if ! { git switch "$branch" && git merge --ff-only; }; then
        >&2 e_error "Error processing branch '$branch'"
        >&2 e_error "Resume by running 'git update-branches $*'"
        break
    fi
    delete_gone_branches
    shift
done

e_underline "Returning back to '$original_branch'"
git switch "$original_branch"
